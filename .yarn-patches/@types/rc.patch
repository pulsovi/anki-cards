diff --git a/index.d.ts b/index.d.ts
index fc1c2f264376c2b2a0a9cd1a6576ad598ee23d4d..fe36e718159f7a73d69b4dd1d0591fd81cb5557e 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -3,39 +3,190 @@
 // Definitions by: Daniel Rosenwasser <https://github.com/DanielRosenwasser>
 //                 BendingBender <https://github.com/BendingBender>
 //                 kusyka911 <https://github.com/kusyka911>
+//                 David Gabison <https://github.com/pulsovi>
 // Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
-// TypeScript Version: 2.2
 
-interface RcResultType<T> {
+import minimist = require('minimist');
+
+interface RcResultType extends Record<number | string | symbol, unknown> {
     /**
-     * Contains all parsed configurations from different sources
+     * Contains file path of all parsed configurations from different sources
      * like '/etc/${appname}rc', '/etc/${appname}/config', and other.
      */
-    configs: T[];
+    configs?: string[];
     /**
      * same as RcResultType.configs[RcResultType.configs.length - 1]
      */
-    config: T;
-    /**
-     * For compatibility with previous versions of '@types/rc'
-     */
-    [key: string]: any;
+    config?: string;
 }
 
-declare function rc<T extends object = { [key: string]: any }>(
+declare function rc(
+    /**
+     * The name of the app to configure, rc will search for this files :
+     * `/etc/${name}/config`,
+     * `/etc/${name}rc`,
+     * `~/.config/${name}/config`,
+     * `~/.config/${name}`,
+     * `~/.${name}/config`,
+     * `~/.${name}rc` and
+     * `.${name}rc` in CWD and its ancestors
+     */
+    name: string,
+    /**
+     * Default config values.
+     * Can be an Object that contains the default values for the config,
+     * the path of a JSON or INI file to use as default config or
+     * can be `null` or `undefined` for no default values
+     */
+    defaults?: string | null,
+    /**
+     * Parsed argv object.
+     * For example, if args is `--foo bar`, then this value should be `{foo: 'bar'}`
+     * If `argv` is `null` or `undefined`, then `rc`'s default parser will parse `process.argv`.
+     */
+    argv?: null,
+    /**
+     * Custom config file parser.
+     * This function will be passed the string contents of each
+     * discovered configuration file, should return a parsed object dictionary.
+     */
+    parse?: (content: string) => object
+): RcResultType & minimist.ParsedArgs;
+declare function rc<T extends object>(
+    /**
+     * The name of the app to configure, rc will search for this files :
+     * `/etc/${name}/config`,
+     * `/etc/${name}rc`,
+     * `~/.config/${name}/config`,
+     * `~/.config/${name}`,
+     * `~/.${name}/config`,
+     * `~/.${name}rc` and
+     * `.${name}rc` in CWD and its ancestors
+     */
     name: string,
-    defaults?: T,
     /**
-     * Parsed argv object. For example, if args is `--foo bar`, then this value should be `{foo: 'bar'}`
+     * Default config values.
+     * Can be an Object that contains the default values for the config,
+     * the path of a JSON or INI file to use as default config or
+     * can be `null` or `undefined` for no default values
+     */
+    defaults: T,
+    /**
+     * Parsed argv object.
+     * For example, if args is `--foo bar`, then this value should be `{foo: 'bar'}`
+     * If `argv` is `null` or `undefined`, then `rc`'s default parser will parse `process.argv`.
+     */
+    argv?: null,
+    /**
+     * Custom config file parser.
+     * This function will be passed the string contents of each
+     * discovered configuration file, should return a parsed object dictionary.
+     */
+    parse?: (content: string) => object
+): T & RcResultType & minimist.ParsedArgs;
+declare function rc<U extends object>(
+    /**
+     * The name of the app to configure, rc will search for this files :
+     * `/etc/${name}/config`,
+     * `/etc/${name}rc`,
+     * `~/.config/${name}/config`,
+     * `~/.config/${name}`,
+     * `~/.${name}/config`,
+     * `~/.${name}rc` and
+     * `.${name}rc` in CWD and its ancestors
+     */
+    name: string,
+    /**
+     * Default config values.
+     * Can be an Object that contains the default values for the config,
+     * the path of a JSON or INI file to use as default config or
+     * can be `null` or `undefined` for no default values
+     */
+    defaults: string | null | undefined,
+    /**
+     * Parsed argv object.
+     * For example, if args is `--foo bar`, then this value should be `{foo: 'bar'}`
+     * If `argv` is `null` or `undefined`, then `rc`'s default parser will parse `process.argv`.
+     */
+    argv: U,
+    /**
+     * Custom config file parser.
+     * This function will be passed the string contents of each
+     * discovered configuration file, should return a parsed object dictionary.
+     */
+    parse?: (content: string) => object
+): U & RcResultType;
+declare function rc<
+    T extends object,
+    U extends object
+>(
+    /**
+     * The name of the app to configure, rc will search for this files :
+     * `/etc/${name}/config`,
+     * `/etc/${name}rc`,
+     * `~/.config/${name}/config`,
+     * `~/.config/${name}`,
+     * `~/.${name}/config`,
+     * `~/.${name}rc` and
+     * `.${name}rc` in CWD and its ancestors
+     */
+    name: string,
+    /**
+     * Default config values.
+     * Can be an Object that contains the default values for the config,
+     * the path of a JSON or INI file to use as default config or
+     * can be `null` or `undefined` for no default values
+     */
+    defaults: T,
+    /**
+     * Parsed argv object.
+     * For example, if args is `--foo bar`, then this value should be `{foo: 'bar'}`
+     * If `argv` is `null` or `undefined`, then `rc`'s default parser will parse `process.argv`.
+     */
+    argv: U,
+    /**
+     * Custom config file parser.
+     * This function will be passed the string contents of each
+     * discovered configuration file, should return a parsed object dictionary.
+     */
+    parse?: (content: string) => object
+): T & U & RcResultType;
+declare function rc<
+    T extends object | string | null | undefined,
+    U extends object | null | undefined
+>(
+    /**
+     * The name of the app to configure, rc will search for this files :
+     * `/etc/${name}/config`,
+     * `/etc/${name}rc`,
+     * `~/.config/${name}/config`,
+     * `~/.config/${name}`,
+     * `~/.${name}/config`,
+     * `~/.${name}rc` and
+     * `.${name}rc` in CWD and its ancestors
+     */
+    name: string,
+    /**
+     * Default config values.
+     * Can be an Object that contains the default values for the config,
+     * the path of a JSON or INI file to use as default config or
+     * can be `null` or `undefined` for no default values
+     */
+    defaults: T,
+    /**
+     * Parsed argv object.
+     * For example, if args is `--foo bar`, then this value should be `{foo: 'bar'}`
      * If `argv` is `null` or `undefined`, then `rc`'s default parser will parse `process.argv`.
      */
-    argv?: T | null,
+    argv: U,
     /**
      * Custom config file parser.
      * This function will be passed the string contents of each
-     * discovered configuration file should return a parsed object dictionary.
+     * discovered configuration file, should return a parsed object dictionary.
      */
-    parse?: ((content: string) => { [key: string]: any }) | null
-): T & RcResultType<T>;
+    parse?: (content: string) => object
+): (T extends string | null | undefined ?
+  (U extends null | undefined ? minimist.ParsedArgs : U) & RcResultType :
+  T & (U extends null | undefined ? minimist.ParsedArgs : U) & RcResultType);
 
 export = rc;
diff --git a/package.json b/package.json
index 6a46bb77f637503646b7cf62c7e4f3b26a63e727..a4ff2b5bf772bbdb439c4e4f9246335e71095b93 100644
--- a/package.json
+++ b/package.json
@@ -29,7 +29,9 @@
         "directory": "types/rc"
     },
     "scripts": {},
-    "dependencies": {},
+    "dependencies": {
+        "@types/minimist": "^1.2.2"
+    },
     "typesPublisherContentHash": "6ff726fe238164b307832e6ccd925156fae23b0192ce813fe34d3bfc82724ca3",
     "typeScriptVersion": "3.6"
 }
